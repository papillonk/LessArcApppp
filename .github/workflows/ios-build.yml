name: iOS Build (.NET MAUI)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      # 1) Kaynak kodu çek
      - name: Checkout
        uses: actions/checkout@v4

      # 2) .NET 8
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3) MAUI workload
      - name: Install MAUI workload
        run: dotnet workload install maui

      # 4) .p12 sertifikayı keychain’e import et
      - name: Import Signing Certificate (.p12)
        env:
          P12_BASE64: ${{ secrets.IOS_DIST_CERT_P12 }}
          P12_PWD:    ${{ secrets.IOS_DIST_CERT_PASSWORD }}
        run: |
          set -e
          CERT_PATH="$RUNNER_TEMP/dist.p12"
          echo "$P12_BASE64" | base64 -D > "$CERT_PATH"

          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain-db"
          security create-keychain -p "" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "" "$KEYCHAIN_PATH"
          security list-keychains -s "$KEYCHAIN_PATH"

          security import "$CERT_PATH" \
            -k "$KEYCHAIN_PATH" \
            -P "$P12_PWD" \
            -A -t cert -f pkcs12

          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN_PATH"

      # 5) Provisioning profile yükle + UUID çıkar
      - name: Install Provisioning Profile
        env:
          PROFILE_BASE64: ${{ secrets.IOS_PROFILE_MOBILEPROVISION }}
        run: |
          set -e
          PP_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PP_DIR"
          PROFILE_PATH="$PP_DIR/lessarc.mobileprovision"
          echo "$PROFILE_BASE64" | base64 -D > "$PROFILE_PATH"

          # UUID'yi çıkar ve env’e koy
          security cms -D -i "$PROFILE_PATH" > "$RUNNER_TEMP/profile.plist"
          PROV_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$RUNNER_TEMP/profile.plist")
          echo "PROV_UUID=$PROV_UUID" >> $GITHUB_ENV
          echo "Provisioning UUID: $PROV_UUID"

      # 5.1) Profilden önemli alanları göster (teşhis için)
      - name: Inspect Provisioning Profile
        run: |
          security cms -D -i "$HOME/Library/MobileDevice/Provisioning Profiles/lessarc.mobileprovision" > "$RUNNER_TEMP/profile.plist"
          echo "---- Provisioning Profile fields ----"
          /usr/libexec/PlistBuddy -c 'Print :UUID' "$RUNNER_TEMP/profile.plist"
          /usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' "$RUNNER_TEMP/profile.plist"
          /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' "$RUNNER_TEMP/profile.plist" || true
          /usr/libexec/PlistBuddy -c 'Print :Entitlements:com.apple.developer.team-identifier' "$RUNNER_TEMP/profile.plist" || true

      # 6) Restore
      - name: Restore
        run: dotnet restore

      # 7) Publish + binlog
      - name: Publish iOS (Release)
        env:
          APPLE_ID:               ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PWD: ${{ secrets.APPLE_APP_SPECIFIC_PWD }}
        run: |
          set -e
          OUT_DIR="$RUNNER_TEMP/ios-publish"
          mkdir -p "$OUT_DIR"

          dotnet publish LessArcApppp/LessArcApppp.csproj \
            -f net8.0-ios \
            -c Release \
            -p:ArchiveOnBuild=true \
            -p:BuildIpa=true \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:CodesignKey="${{ secrets.IOS_DIST_CERT_NAME }}" \
            -p:CodesignProvision="${PROV_UUID}" \
            -p:EnablePackageSigning=false \
            -bl:"$OUT_DIR/msbuild.binlog" \
            -o "$OUT_DIR"

          echo "Publish output under $OUT_DIR:"
          find "$OUT_DIR" -maxdepth 4 -print

      # 7.1) Binlog’u her durumda yükle (teşhis)
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: msbuild-logs
          path: ${{ runner.temp }}/ios-publish/msbuild.binlog

      # 8) IPA’yı bul (hem temp out’u hem de varsayılan publish dizinlerini tara)
      - name: Find IPA
        id: ipa
        run: |
          set -e
          CANDIDATES=()
          CANDIDATES+=( "$RUNNER_TEMP/ios-publish" )
          CANDIDATES+=( "$GITHUB_WORKSPACE/LessArcApppp/bin/Release/net8.0-ios/ios-arm64/publish" )
          CANDIDATES+=( "$GITHUB_WORKSPACE/LessArcApppp/bin/Release/net8.0-ios/ios-arm64" )

          for D in "${CANDIDATES[@]}"; do
            echo "Scanning: $D"
            if [ -d "$D" ]; then
              F=$(find "$D" -type f -name "*.ipa" | head -n 1 || true)
              if [ -n "$F" ]; then
                echo "ipa=$F" >> "$GITHUB_OUTPUT"
                echo "Found IPA: $F"
                exit 0
              fi
            fi
          done

          echo "Scanning entire workspace for *.ipa …"
          F=$(find "$GITHUB_WORKSPACE" -type f -name "*.ipa" | head -n 1 || true)
          if [ -n "$F" ]; then
            echo "ipa=$F" >> "$GITHUB_OUTPUT"
            echo "Found IPA: $F"
            exit 0
          fi

          echo "IPA bulunamadı!"
          exit 1

      # 8.1) Hata olursa publish ağacını da yükle (teşhis)
      - name: Upload publish tree (debug)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: publish-tree
          path: |
            ${{ runner.temp }}/ios-publish
            LessArcApppp/bin/Release/net8.0-ios

      # 9) IPA’yı artifact olarak yükle
      - name: Upload IPA artifact
        if: steps.ipa.outputs.ipa != ''
        uses: actions/upload-artifact@v4
        with:
          name: iOS-IPA
          path: ${{ steps.ipa.outputs.ipa }}
