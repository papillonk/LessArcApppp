workflows:
  ios_maui_release:
    name: "iOS MAUI Release (.NET 8, Auto Codesign)"
    instance_type: mac_mini_m1
    max_build_duration: 60

    environment:
      # (İstersen burada xcode sürümü de pinleyebilirsin: xcode: 16.0)
      vars:
        PROJECT_DIR: "LessArcApppp"            # csproj klasörü
        CSPROJ_PATH: "LessArcApppp.csproj"     # csproj dosyası
        IOS_BUNDLE_ID: "com.nisakara.lessarc"  # csproj ile aynı
        # APPLE_TEAM_ID eklediysen env'de, fetch-signing-files'ta kullanıyoruz (opsiyonel)
      groups:
        - app_store_connect     # APP_STORE_CONNECT_PRIVATE_KEY / KEY_IDENTIFIER / ISSUER_ID / (APPLE_TEAM_ID)
        - ios_signing           # CM_CERTIFICATE (p12 base64) / CM_CERTIFICATE_PASSWORD

    cache:
      cache_paths:
        - ~/.nuget/packages
        - ~/.dotnet

    scripts:
      - name: .NET 8 ve MAUI yükle
        script: |
          set -euo pipefail
          curl -sSL https://dot.net/v1/dotnet-install.sh -o dotnet-install.sh
          bash dotnet-install.sh --channel 8.0
          export PATH="$HOME/.dotnet:$PATH"
          dotnet --info
          dotnet workload install maui

      - name: Codemagic CLI + keychain
        script: |
          set -euo pipefail
          pip3 install --user codemagic-cli-tools
          export PATH="$HOME/Library/Python/3.11/bin:$PATH"
          keychain initialize

      - name: Sertifikayı (p12) keychain’e import et
        script: |
          set -euo pipefail
          # Base64 p12'yi dosyaya yaz
          echo "$CM_CERTIFICATE" | base64 --decode > dist.p12
          # p12'yi keychain'e ekle
          keychain add-certificates \
            --certificate dist.p12 \
            --certificate-password "$CM_CERTIFICATE_PASSWORD"

      - name: App Store Connect’ten provisioning profilleri çek
        script: |
          set -euo pipefail
          # APPLE_TEAM_ID env'de tanımlıysa parametre olarak ver; yoksa atla
          if [ -n "${APPLE_TEAM_ID:-}" ]; then
            app-store-connect fetch-signing-files "$IOS_BUNDLE_ID" --type IOS_APP_STORE --team-id "$APPLE_TEAM_ID" --create
          else
            app-store-connect fetch-signing-files "$IOS_BUNDLE_ID" --type IOS_APP_STORE --create
          fi
          # Keychain'deki sertifikaları da ekle (provisioning profilleri okurken işimize yarıyor)
          keychain add-certificates
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      - name: NuGet restore
        script: |
          set -euo pipefail
          cd "$PROJECT_DIR"
          dotnet restore "$CSPROJ_PATH"

      - name: İmzalı IPA üret (Release, ios-arm64)
        script: |
          set -euo pipefail
          cd "$PROJECT_DIR"
          dotnet publish "$CSPROJ_PATH" -f net8.0-ios -c Release \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:ArchiveOnBuild=true \
            -p:Codesign=true \
            -p:BuildIpa=true

      - name: IPA/xcarchive topla
        script: |
          set -euo pipefail
          mkdir -p "$CM_ARTIFACTS_DIR"
          # .NET bazen farklı klasöre koyabiliyor; iki olası yolu da tara
          find "$PROJECT_DIR/bin/Release/net8.0-ios/ios-arm64" -name "*.ipa" -print -exec cp {} "$CM_ARTIFACTS_DIR" \; || true
          find "$PROJECT_DIR/bin/Release/net8.0-ios/ios-arm64/publish" -name "*.ipa" -print -exec cp {} "$CM_ARTIFACTS_DIR" \; || true
          find "$PROJECT_DIR/bin/Release/net8.0-ios/ios-arm64" -name "*.xcarchive" -print -exec cp -R {} "$CM_ARTIFACTS_DIR" \; || true

    artifacts:
      - $CM_ARTIFACTS_DIR/*.ipa
      - $CM_ARTIFACTS_DIR/*.xcarchive

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "main"
          include: true
          source: true
