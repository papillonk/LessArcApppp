workflows:
  ios_maui_release:
    name: "iOS MAUI Release (.NET 8, Manual Codesign + TestFlight Upload)"
    instance_type: mac_mini_m1
    max_build_duration: 60

    environment:
      # İstersen pinleyebilirsin: xcode: 16.0
      vars:
        PROJECT_DIR: "LessArcApppp"            # csproj klasörü
        CSPROJ_PATH: "LessArcApppp.csproj"     # csproj dosya adı
        IOS_BUNDLE_ID: "com.nisakara.lessarc"  # csproj ile aynı
      groups:
        - ios_signing        # CM_CERTIFICATE / CM_CERTIFICATE_PASSWORD / CM_PROVISIONING_PROFILE
        - app_store_connect  # APP_STORE_CONNECT_PRIVATE_KEY / KEY_IDENTIFIER / ISSUER_ID

    cache:
      cache_paths:
        - ~/.nuget/packages
        - ~/.dotnet

    scripts:
      - name: .NET 8 ve MAUI yükle
        script: |
          set -euo pipefail
          curl -sSL https://dot.net/v1/dotnet-install.sh -o dotnet-install.sh
          # .NET’i kullanıcı dizinine kur
          bash dotnet-install.sh --channel 8.0 --install-dir "$HOME/.dotnet"
          # Bu adımda kullanmak için PATH’e ekle
          export PATH="$HOME/.dotnet:$PATH"
          # Sonraki tüm adımlar için kalıcı hale getir
          echo 'export PATH="$HOME/.dotnet:$PATH"' >> $CM_ENV
          echo 'export DOTNET_ROOT="$HOME/.dotnet"' >> $CM_ENV

          dotnet --info
          dotnet workload install maui

      - name: Keychain hazırla (Codemagic CLI)
        script: |
          set -euo pipefail
          pip3 install --user codemagic-cli-tools
          export PATH="$HOME/Library/Python/3.11/bin:$PATH"
          keychain initialize

      - name: p12 sertifikayı import et
        script: |
          set -euo pipefail
          echo "$CM_CERTIFICATE" | base64 --decode > dist.p12
          keychain add-certificates \
            --certificate dist.p12 \
            --certificate-password "$CM_CERTIFICATE_PASSWORD"
          security find-identity -v -p codesigning

      - name: Provisioning profile’ı yükle ve UUID/Identity çıkar
        script: |
          set -euo pipefail
          echo "$CM_PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision

          # UUID
          UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          echo "PROFILE UUID: $UUID"
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

          # İmza kimliği (Apple Distribution:)
          CODESIGN_IDENTITY=$(security find-identity -v -p codesigning | grep 'Apple Distribution:' | head -n1 | sed -E 's/.*"(.+)"/\1/')
          if [ -z "$CODESIGN_IDENTITY" ]; then
            echo "Code signing identity bulunamadı!"
            security find-identity -v -p codesigning || true
            exit 1
          fi
          echo "CODESIGN_IDENTITY: $CODESIGN_IDENTITY"

          # Sonraki adımlar için ENV’ye kaydet
          echo "export PROV_UUID=$UUID" >> $CM_ENV
          echo "export CODESIGN_IDENTITY=\"$CODESIGN_IDENTITY\"" >> $CM_ENV

      - name: NuGet restore
        script: |
          set -euo pipefail
          # .NET PATH’ini garantiye al
          export PATH="$HOME/.dotnet:$PATH"
          cd "$PROJECT_DIR"
          dotnet restore "$CSPROJ_PATH"

      - name: İmzalı IPA üret (Release, ios-arm64)
        script: |
          # -u yok; env değişkenleri boşsa kendimiz bulacağız
          set -eo pipefail
          export PATH="$HOME/.dotnet:$PATH"

          # ENV dosyasını içeri al (varsa)
          [ -f "$CM_ENV" ] && . "$CM_ENV" || true

          # Boşsa tekrar tespit et
          if [ -z "${CODESIGN_IDENTITY:-}" ]; then
            CODESIGN_IDENTITY=$(security find-identity -v -p codesigning | grep 'Apple Distribution:' | head -n1 | sed -E 's/.*"(.+)"/\1/')
          fi
          if [ -z "${PROV_UUID:-}" ]; then
            # Yüklediğimiz profillerden ilkini al
            PROV_UUID=$(basename "$(ls -1 "$HOME/Library/MobileDevice/Provisioning Profiles"/*.mobileprovision | head -n1)" .mobileprovision)
          fi

          echo "Using CODESIGN_IDENTITY: ${CODESIGN_IDENTITY}"
          echo "Using PROV_UUID: ${PROV_UUID}"

          if [ -z "${CODESIGN_IDENTITY:-}" ] || [ -z "${PROV_UUID:-}" ]; then
            echo "Code signing bilgileri eksik!"
            exit 1
          fi

          cd "$PROJECT_DIR"
          dotnet publish "$CSPROJ_PATH" -f net8.0-ios -c Release \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:ArchiveOnBuild=true \
            -p:BuildIpa=true \
            -p:Codesign=true \
            -p:CodesignKey="$CODESIGN_IDENTITY" \
            -p:CodesignProvision="$PROV_UUID"

      - name: IPA/xcarchive topla
        script: |
          # -u yok; CM_ARTIFACTS_DIR yoksa fallback kullan
          set -eo pipefail
          ART_DIR="${CM_ARTIFACTS_DIR:-$PWD/artifacts}"
          mkdir -p "$ART_DIR"
          # Olası tüm çıkış yollarını tara
          find "$PROJECT_DIR/bin/Release/net8.0-ios/ios-arm64" -name "*.ipa" -print -exec cp {} "$ART_DIR" \; || true
          find "$PROJECT_DIR/bin/Release/net8.0-ios/ios-arm64/publish" -name "*.ipa" -print -exec cp {} "$ART_DIR" \; || true
          find "$PROJECT_DIR/bin/Release/net8.0-ios/ios-arm64" -name "*.xcarchive" -print -exec cp -R {} "$ART_DIR" \; || true
          ls -la "$ART_DIR"
          # Sonraki aşamada artifacts desenleri çalışsın diye fallback'i export et
          echo "export CM_ARTIFACTS_DIR=\"$ART_DIR\"" >> $CM_ENV

      - name: TestFlight’a yükle (App Store Connect)
        script: |
          set -euo pipefail
          export PATH="$HOME/Library/Python/3.11/bin:$PATH"
          IPA="$(ls -1 "${CM_ARTIFACTS_DIR:-$PWD/artifacts}"/*.ipa | head -n1)"
          echo "Uploading IPA: $IPA"
          # Codemagic CLI ile TestFlight yüklemesi
          app-store-connect publish --path "$IPA" --testflight

    artifacts:
      - $CM_ARTIFACTS_DIR/*.ipa
      - artifacts/*.ipa
      - $CM_ARTIFACTS_DIR/*.xcarchive
      - artifacts/*.xcarchive

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "main"
          include: true
          source: true
